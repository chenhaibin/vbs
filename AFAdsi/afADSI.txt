


' ***********************************************************
' Name    : 
' Author  :
' Date    :
' Version :
' Notes   :
'
' Subroutines included in this script:
'
'  subLogToFile ( strMsg, strLogDir ) - Logs Message into file in directory specified, filename will be based on date.
'  subMsg ( strMsg )                  - Logs Message to console/messagebox
'  subDebugMsg ( strMsg )             - If boolDebug = TRUE, displays all debug messages
'  subErrMsg ( strMsg )               - Encounters an error, displays message in console/messagebox and eventlog. Quits script
'  subDisplayUsage		      - Displays usage (this'll have to be doctored for each script)
'  subProcessSwitches ( strNum )      - Process switches (again will have to be doctored for each script)
'  subCreateDir ( strDir )            - Creates Directory
'
' ************************************************************

Option Explicit

Dim boolDebug
Dim strLogDir, strPrefix

'debugging off by default
boolDebug = FALSE

'set the string below for log directory (needs to be set)
'strLogDir = "c:\temp"

'set the string below for prefix on logs (doesn't need to be set)
'strPrefix = "TMP"

'process the arguments
subProcessSwitches (2)

' -----------------------------------( insert code here )-----------------------------------------

SubPullAllComputers "EBUSINESS"

'wscript.quit

Dim oDOM 

set oDOM = CreateObject ("Microsoft.XMLDOM")

oDOM.aSync = false

oDOM.load ("servers.xml")

Dim oChild, strNode

Set oChild = oDOM.documentElement.childNodes

For Each strNode in oChild
	wscript.echo strNode.NodeName & " " & strNode.XML
Next

'SubPullAllComputers "E-COMMERCE"

' ------------------------------------------( cut ) ----------------------------------------------


Sub subPullAllComputers(strDomain)

'Dim Arrays
Dim arrDomain()

'Dim Objects
Dim PrimDomainContr

'Dim Counters
Dim Computer, iCount, jCounter

'Connect to Domain using ADSI
Set PrimDomainContr = getobject("WinNT://" & strDomain)

'Filter out all which are not Computers
PrimDomainContr.filter = Array("Computer")

iCount = 0

'Enumerate through displaying each computername
For each Computer in PrimDomainContr
icount = icount + 1
'First check the name complies
If Len(computer.name) <> 8 then 
	wscript.echo " Server name not 8 characters long: " & computer.name
	Redim Preserve arrDomain (6, icount)
	arrDomain (1, icount) = computer.name
else
	Select case lcase (strDomain)

		case "ecommerce"

		case "ebusiness"

			Redim Preserve arrDomain ( 6, iCount )
			' Name
			arrDomain (1,iCount) = computer.name

			' Location
			Select Case Mid (computer.name,5,1)

				case 0,1,2,3,4
					arrDomain (2,iCount) = "Copley"
				case 5,6,7,8,9
					arrDomain (2, iCount) = "Pudsey"
				case else
					arrDomain (2, iCount) = "Unknown"
			end select

			' Role

			Select Case Mid (computer.name, 6,1)

				case 0
					Select case Mid(Computer.name, 7,2)

						case "01", "02"
							arrDomain (3, iCount) = "Domain Controller"
						case "11"
							arrDomain (3, iCount) = "Admin Server"
						case else
							arrDomain (3, iCount) = "Unknown(MISC)"
					end select


				case 1
					Select case Mid(Computer.Name, 6,3)

						case "101"
							arrDomain (3, iCount) = "Membership SQL"
						case "102"
							arrDomain (3, iCount) = "Group Membership SQL"
						case "103"
							arrDomain (3, iCount) = "Audit SQL"
						case "105"
							arrDomain (3, iCount) = "Application SQL"
						case "106"
							arrDomain (3, iCount) = "Session SQL"
						case else
							arrDomain (3, iCount) = "Unknown(SQL)"
					end select
				case 2
					arrDomain (3, iCount) = "Web Server"
				case 4
					arrDomain (3, iCount) = "Domino Server"
				case else
					arrDomain (3, iCount) = "Unknown(ROLE)"
			end select

			Select case Mid (computer.name, 5,1)

				case 0,5
					arrDomain (4, iCount) = "Live"
				case 1,6
					arrDomain (4, iCount) = "Level 1"
				case 2,7
					arrDomain (4, iCount) = "Level 2"
				case 3
					arrDomain (4, iCount) = "Level 3"
				case else
					arrDomain (4, iCount) = "Unknown(ENV)"
			end select

			Select case ucase (Left (Computer.Name, 4))

				case "EBUS"
					arrDomain (5, iCount) = "RBIT"
				case "CBUS"
					arrDomain (5, iCount) = "CMIGIntra"
				case else
					arrDomain (5, iCount) = "Unknown(GRP)"
			end select



		case "ecsresource"

		case "ecomlevel2"

		case "ecomlevel1"

		case "ecomlevel3"

		case "ebuslevel3"

		case "ebuslevel2"

		case "ebuslevel1"

		case else

	end select
end if 




Next


For jCounter = 1 to Ubound (arrDomain, 2)

'wscript.echo "----------------------------------------"
'wscript.echo "Name        : " & arrDomain (1, jCounter)
'wscript.echo "Location    : " & arrDomain (2, jCounter)
'wscript.echo "Role        : " & arrDomain (3, jCounter)
'wscript.echo "Environment : " & arrDomain (4, jCounter)
'wscript.echo "Group       : " & arrDomain (5, jCounter)

subAddServer2XML strDomain, arrDomain(2, jCounter), arrDomain (1,jcounter), arrDomain(5, jcounter), arrDomain(3, Jcounter)

Next



End sub


sub subAddServer2XML (strDomain,strLocation, strServer, strGroup, strRole)

	Dim objDOM, blnFileExist, objRoot, objNode
	
	set objDOM = createObject ("Microsoft.XMLDOM")

	'Turn off asynchronous file loading
	objDOM.async = False

	'loads my xml doc
	blnFileExist = objDOM.load ("servers.xml")

	'tested for its existence
	if blnFileExist = False then
		'wscript.echo "file doesn't exist"
		set objRoot = objDOM.createElement ( strDomain )
		objDOM.appendChild objRoot
	else
		'wscript.echo "file exists"
		set objRoot = objDOM.documentElement
	end if


	Set objNode = objDOM.createElement("SERVER")
	
	AddNodeAttribute objDOM, objNode, "ServerName", strServer
	AddNodeAttribute objDOM, objNode, "Location", strLocation
	AddNodeAttribute objDOM, objNode, "Role", strRole
	'AddNodeAttribute objDOM, objNode, "Environment", strEnvironment
	AddNodeAttribute objDOM, objNode, "Group", strGroup

	objDOM.save ("servers.xml")

	set objDOM = nothing

end sub

Sub AddDomElement(objDom, strName, strValue)

	Dim objNode
	
	'Add new node
	Set objNode = objDom.createElement(strName)
	objNode.Text = strValue
	objDom.documentElement.appendChild objNode

End Sub

Sub AddNodeAttribute(objDom, objNode, strName, strValue)

	Dim objAttrib

	Set objAttrib = objDOM.createAttribute(strName)
	objAttrib.Text =strValue
	objNode.Attributes.setNamedItem objAttrib
	objDOM.documentElement.appendChild objNode
	
End Sub

Sub subPullAllDomains

'Dim objects
Dim objNameSpace

'Dim Counters
Dim Domain

'Connect using ADSI
Set objNameSpace = GetObject("WinNT:")

'Enumerate through every Domain in namespace
For Each Domain in objNamespace

	'Display
	subMsg Domain.Name

Next

End sub

sub subTestRun

call subLogtoFile ("Hello", strLogDir)
call subCreateDir (strLogDir)
call subMsg ("Test Message")
call subDebugMsg ("Test Debug Message")
call SubErrMsg ("I've Errored")

end sub

sub subCreateDir (strDir)

' Dim objects
Dim oFSO, oFile

' Dim strings
Dim strDate, strDD, strMM, strYYYY, strProcessDir

' Dim Arrays
Dim arrLogDir

' Dim counters
Dim i

' create hook into filesystem
set oFSO = createobject ("scripting.filesystemobject")

'get date string ready for processing
strDate = Date

'what is the day
strDD = Left ( Date, 2)

'what is the month
strMM = Mid (Date, 4,2)

'what is the year
strYYYY = Mid (Date, 7,4)

'debug for values of date
subDebugMsg strDD & " " & strMM & " " & strYYYY

'split each of the subdirectories up so that we can check if they exist
arrLogDir = split (strdir, "\")

'start of with no text in drive string
strProcessDir = ""

'enumerate each of the directories one by one
for i = 0 to Ubound (arrLogDir)

	'if this is the first array value e.g c:\ just add it to strProcessDir
	if i = 0 then
		strProcessDir = arrLogDir(i)	
	else
		'if this is any other array value, append it on to the end of the string	
		strProcessDir = strProcessDir & "\" & arrLogDir(i) 
	end if

	' check to see whether the folder specified in strProcessDir exists.  if not create it
	if ofso.folderexists ( strProcessDir ) = true then
		subDebugMsg strProcessDir & " exists"
	else
		subDebugMsg strProcessDir & " doesn't exist, creating..."

		'create folder
		ofso.createfolder ( strProcessDir ) 

		'check it was created. Else error.
		if ofso.folderexists (strProcessDir) = true then
			subDebugMsg strProcessDir & " created"
		else
			subErrMsg strProcessDir & " could not be created"
		end if

	end if

next 


end sub

sub subLogtoFile (strMsg, strLogDir)

if strLogDir = "" then subErrMsg "strLogDir not set"

' Dim objects
Dim oFSO, oFile, oWshNetwork

' Dim strings
Dim strDate, strDD, strMM, strYYYY, strProcessDir

' Dim Arrays
Dim arrLogDir

' Dim counters
Dim i

' create hook into filesystem
set oFSO = createobject ("scripting.filesystemobject")

' create hook into network
set oWshNetwork = createobject ("wscript.network")

'get date string ready for processing
strDate = Date

'what is the day
strDD = Left ( Date, 2)

'what is the month
strMM = Mid (Date, 4,2)

'what is the year
strYYYY = Mid (Date, 7,4)

'debug for values of date
subDebugMsg strDD & " " & strMM & " " & strYYYY

'create directories if needed
subCreateDir (strlogdir)

' check whether logfile exists in the directory. if not create a new file using the date as basis
if ofso.fileexists (strLogDir & "\" & strPrefix & "_" &oWshNetwork.ComputerName & "_" & strYYYY & strMM & strDD & ".log") = true then
	subDebugMsg "file does exist"

	'open file for appending
	set ofile = ofso.opentextfile (strLogDir & "\" & strPrefix & "_"& oWshNetwork.ComputerName & "_" & strYYYY & strMM & strDD & ".log",8)
else
	subDebugMsg "file doesn't exist"

	'create file
	set ofile = ofso.createtextfile (strLogDir & "\" & strPrefix & "_" &oWshNetwork.ComputerName & "_" & strYYYY & strMM & strDD & ".log")
end if

'write the message into the file
ofile.write strMsg

'and save
ofile.close

'clean up objects
set ofile = nothing
set ofso = nothing 
set owshnetwork = nothing

end sub

sub subMsg (strMsg)

'display message to console/messagebox
wscript.echo Now & " Msg: " & strMsg

end sub

sub subDebugMsg (strMsg)

'only if debugging is on display debugging messages to console/messagebox
if BoolDebug = TRUE then	
	'Dim strMsg
	wscript.echo Now & " Debug: " & strMsg
else
end if	


end sub

sub subErrMsg (strMsg)

'Dim objects
Dim oWshShell

'start oWshShell so we can log events
set oWshShell = createobject ("wscript.shell")

'display error to console/messagebox
wscript.echo Now & " Err: " & strMsg

'write error into eventlog
oWshShell.logevent 1,Now & " " & wscript.scriptname & " Err: " & strMsg

'cleanup objects
set oWshShell = nothing

'end script, set errorlevel to 1 for failure
wscript.quit(1)

end sub

sub SubDisplayUsage

'display usage
submsg	vbcrlf & vbcrlf & " Usage: template.vbs [/?] [/debug]" & vbcrlf & _
	vbcrlf & "    /?        - Displays this help" & _
	vbcrlf & "    /debug    - Shows debug info"

end sub

sub subProcessSwitches (strNum)

'Dim counters
Dim nArgs

'get arguments from running the script, if there are too many then error
if wscript.arguments.count > strNum then 
	subMsg " Too many Arguments"
	subDisplayUsage	
	wscript.quit
else 
	'enumerate through arguments and choose what to do based on those arguments
	for nArgs = 0 to wscript.arguments.count - 1
		select case wscript.arguments(nArgs)
			case "/?"
				subDisplayUsage
				wscript.quit
			case "/debug"
				'display debug info where appropriate
				boolDebug = TRUE
			case else
				'do not display debug info
				boolDebug = FALSE
		end select
	next
end if 

end sub